<?php
/**
 * AccountData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PostPuma
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PostPuma - OpenAPI 3.0
 *
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PostPuma\Client\Model;

use \ArrayAccess;
use \PostPuma\ObjectSerializer;

/**
 * AccountData Class Doc Comment
 *
 * @category Class
 * @package  PostPuma
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'union_id' => 'string',
        'is_private' => 'bool',
        'duet_disabled' => 'bool',
        'privacy_levels' => 'string[]',
        'stitch_disabled' => 'bool',
        'comment_disabled' => 'bool',
        'max_video_post_duration_sec' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'union_id' => null,
        'is_private' => null,
        'duet_disabled' => null,
        'privacy_levels' => null,
        'stitch_disabled' => null,
        'comment_disabled' => null,
        'max_video_post_duration_sec' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'union_id' => false,
        'is_private' => false,
        'duet_disabled' => false,
        'privacy_levels' => false,
        'stitch_disabled' => false,
        'comment_disabled' => false,
        'max_video_post_duration_sec' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'union_id' => 'union_id',
        'is_private' => 'is_private',
        'duet_disabled' => 'duet_disabled',
        'privacy_levels' => 'privacy_levels',
        'stitch_disabled' => 'stitch_disabled',
        'comment_disabled' => 'comment_disabled',
        'max_video_post_duration_sec' => 'max_video_post_duration_sec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'union_id' => 'setUnionId',
        'is_private' => 'setIsPrivate',
        'duet_disabled' => 'setDuetDisabled',
        'privacy_levels' => 'setPrivacyLevels',
        'stitch_disabled' => 'setStitchDisabled',
        'comment_disabled' => 'setCommentDisabled',
        'max_video_post_duration_sec' => 'setMaxVideoPostDurationSec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'union_id' => 'getUnionId',
        'is_private' => 'getIsPrivate',
        'duet_disabled' => 'getDuetDisabled',
        'privacy_levels' => 'getPrivacyLevels',
        'stitch_disabled' => 'getStitchDisabled',
        'comment_disabled' => 'getCommentDisabled',
        'max_video_post_duration_sec' => 'getMaxVideoPostDurationSec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('union_id', $data ?? [], null);
        $this->setIfExists('is_private', $data ?? [], null);
        $this->setIfExists('duet_disabled', $data ?? [], null);
        $this->setIfExists('privacy_levels', $data ?? [], null);
        $this->setIfExists('stitch_disabled', $data ?? [], null);
        $this->setIfExists('comment_disabled', $data ?? [], null);
        $this->setIfExists('max_video_post_duration_sec', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets union_id
     *
     * @return string|null
     */
    public function getUnionId()
    {
        return $this->container['union_id'];
    }

    /**
     * Sets union_id
     *
     * @param string|null $union_id union_id
     *
     * @return self
     */
    public function setUnionId($union_id)
    {
        if (is_null($union_id)) {
            throw new \InvalidArgumentException('non-nullable union_id cannot be null');
        }
        $this->container['union_id'] = $union_id;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool|null
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool|null $is_private is_private
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {
        if (is_null($is_private)) {
            throw new \InvalidArgumentException('non-nullable is_private cannot be null');
        }
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets duet_disabled
     *
     * @return bool|null
     */
    public function getDuetDisabled()
    {
        return $this->container['duet_disabled'];
    }

    /**
     * Sets duet_disabled
     *
     * @param bool|null $duet_disabled duet_disabled
     *
     * @return self
     */
    public function setDuetDisabled($duet_disabled)
    {
        if (is_null($duet_disabled)) {
            throw new \InvalidArgumentException('non-nullable duet_disabled cannot be null');
        }
        $this->container['duet_disabled'] = $duet_disabled;

        return $this;
    }

    /**
     * Gets privacy_levels
     *
     * @return string[]|null
     */
    public function getPrivacyLevels()
    {
        return $this->container['privacy_levels'];
    }

    /**
     * Sets privacy_levels
     *
     * @param string[]|null $privacy_levels privacy_levels
     *
     * @return self
     */
    public function setPrivacyLevels($privacy_levels)
    {
        if (is_null($privacy_levels)) {
            throw new \InvalidArgumentException('non-nullable privacy_levels cannot be null');
        }
        $this->container['privacy_levels'] = $privacy_levels;

        return $this;
    }

    /**
     * Gets stitch_disabled
     *
     * @return bool|null
     */
    public function getStitchDisabled()
    {
        return $this->container['stitch_disabled'];
    }

    /**
     * Sets stitch_disabled
     *
     * @param bool|null $stitch_disabled stitch_disabled
     *
     * @return self
     */
    public function setStitchDisabled($stitch_disabled)
    {
        if (is_null($stitch_disabled)) {
            throw new \InvalidArgumentException('non-nullable stitch_disabled cannot be null');
        }
        $this->container['stitch_disabled'] = $stitch_disabled;

        return $this;
    }

    /**
     * Gets comment_disabled
     *
     * @return bool|null
     */
    public function getCommentDisabled()
    {
        return $this->container['comment_disabled'];
    }

    /**
     * Sets comment_disabled
     *
     * @param bool|null $comment_disabled comment_disabled
     *
     * @return self
     */
    public function setCommentDisabled($comment_disabled)
    {
        if (is_null($comment_disabled)) {
            throw new \InvalidArgumentException('non-nullable comment_disabled cannot be null');
        }
        $this->container['comment_disabled'] = $comment_disabled;

        return $this;
    }

    /**
     * Gets max_video_post_duration_sec
     *
     * @return int|null
     */
    public function getMaxVideoPostDurationSec()
    {
        return $this->container['max_video_post_duration_sec'];
    }

    /**
     * Sets max_video_post_duration_sec
     *
     * @param int|null $max_video_post_duration_sec max_video_post_duration_sec
     *
     * @return self
     */
    public function setMaxVideoPostDurationSec($max_video_post_duration_sec)
    {
        if (is_null($max_video_post_duration_sec)) {
            throw new \InvalidArgumentException('non-nullable max_video_post_duration_sec cannot be null');
        }
        $this->container['max_video_post_duration_sec'] = $max_video_post_duration_sec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


